[
    {
        "id": 301,
        "chunk_id": "d3a68f3f-c295-4c97-9c20-3ed48c87b477",
        "content": "At each step the model is auto-regressive [10], consuming the previously generated symbols as additional input when generating the next..<image><image_id>2c851fc8-d71d-4b7a-9990-c7b827a55698</image_id>This graph illustrates the architecture of a Transformer model used for sequence-to-sequence tasks. The model consists of an encoder (left) and a decoder (right). The encoder processes the input sequence through multiple layers of multi-head attention and feed-forward neural networks, each followed by an add & norm step. Positional encoding is added to the input embeddings to incorporate the order of the sequence. The decoder processes the output sequence similarly, but it also includes masked multi-head attention to prevent it from attending to future positions. The final output probabilities are generated through a linear layer followed by a softmax layer. The diagram shows the flow of data through these components, highlighting the interactions between different parts of the model.</image>\n\nFigure 1: The Transformer - model architecture..The Transformer follows this overall architecture using stacked self-attention and point-wise, fully connected layers for both the encoder and decoder, shown in the left and right halves of Figure 1, respectively..# 3.1 Encoder and Decoder Stacks \n\nEncoder: The encoder is composed of a stack of $N=6$ identical layers..Each layer has two sub-layers..The first is a multi-head self-attention mechanism, and the second is a simple, positionwise fully connected feed-forward network..We employ a residual connection [11] around each of the two sub-layers, followed by layer normalization [1]..That is, the output of each sub-layer is $\\operatorname{LayerNorm}(x+\\operatorname{Sublayer}(x))$, where $\\operatorname{Sublayer}(x)$ is the function implemented by the sub-layer itself..To facilitate these residual connections, all sub-layers in the model, as well as the embedding layers, produce outputs of dimension $d_{\\text {model }}=512$..Decoder: The decoder is also composed of a stack of $N=6$ identical layers..In addition to the two sub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head attention over the output of the encoder stack..Similar to the encoder, we employ residual connections around each of the sub-layers, followed by layer normalization..We also modify the self-attention sub-layer in the decoder stack to prevent positions from attending to subsequent positions..This masking, combined with fact that the output embeddings are offset by one position, ensures that the predictions for position $i$ can depend only on the known outputs at positions less than $i$..### 3.2 Attention\n\nAn attention function can be described as mapping a query and a set of key-value pairs to an output, where the query, keys, values, and output are all vectors..The output is computed as a weighted sum",
        "similarity": 1,
        "file_info": {
            "title": "1706",
            "author": "",
            "creator": "LaTeX with hyperref",
            "subject": "",
            "keywords": "",
            "producer": "pdfTeX-1.40.25",
            "extension": "03762v7"
        },
        "chunk_info": {
            "encoder": "sentence_encoder",
            "language": "en",
            "chunk_size": 606,
            "chunk_type": "sentence_chunk",
            "chunk_index": 2,
            "next_chunk_id": "72a70092-7268-4279-b77f-0fbab4f5abcd",
            "prev_chunk_id": "334cdfc2-b18b-47ad-b038-4d058d821737"
        },
        "position_info": {},
        "media_ref": {
            "links": [],
            "images": [
                {
                    "image_id": "2c851fc8-d71d-4b7a-9990-c7b827a55698",
                    "image_url": "images/document_images/2c851fc8-d71d-4b7a-9990-c7b827a55698.jpeg",
                    "image_type": "graph",
                    "image_description": "This graph illustrates the architecture of a Transformer model used for sequence-to-sequence tasks. The model consists of an encoder (left) and a decoder (right). The encoder processes the input sequence through multiple layers of multi-head attention and feed-forward neural networks, each followed by an add & norm step. Positional encoding is added to the input embeddings to incorporate the order of the sequence. The decoder processes the output sequence similarly, but it also includes masked multi-head attention to prevent it from attending to future positions. The final output probabilities are generated through a linear layer followed by a softmax layer. The diagram shows the flow of data through these components, highlighting the interactions between different parts of the model."
                }
            ],
            "tables": []
        },
        "semantic_info": {
            "keywords": [
                "10",
                "Transformer",
                "1",
                "Transformer",
                "Transformer",
                "1",
                "3.1",
                "$N=6$",
                "two",
                "first",
                "second",
                "11",
                "two",
                "1]",
                "\\operatorname{Sublayer}(x)$",
                "512$",
                "$N=6$",
                "two",
                "third",
                "one",
                "less than $i$.."
            ]
        },
        "created_at": "2025-07-12T19:00:04.636371+00:00"
    },
    {
        "id": 307,
        "chunk_id": "48a07387-5891-4d07-bc1d-35990201819d",
        "content": "We also experimented with using learned positional embeddings [9] instead, and found that the two versions produced nearly identical results (see Table 3 row (E))..We chose the sinusoidal version because it may allow the model to extrapolate to sequence lengths longer than the ones encountered during training..## 4 Why Self-Attention\n\nIn this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations $\\left(x_{1}, \\ldots, x_{n}\\right)$ to another sequence of equal length $\\left(z_{1}, \\ldots, z_{n}\\right)$, with $x_{i}, z_{i} \\in \\mathbb{R}^{d}$, such as a hidden layer in a typical sequence transduction encoder or decoder..Motivating our use of self-attention we consider three desiderata..One is the total computational complexity per layer..Another is the amount of computation that can be parallelized, as measured by the minimum number of sequential operations required..The third is the path length between long-range dependencies in the network..Learning long-range dependencies is a key challenge in many sequence transduction tasks..One key factor affecting the ability to learn such dependencies is the length of the paths forward and backward signals have to traverse in the network..The shorter these paths between any combination of positions in the input and output sequences, the easier it is to learn long-range dependencies [12]..Hence we also compare the maximum path length between any two input and output positions in networks composed of the different layer types..As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially executed operations, whereas a recurrent layer requires $O(n)$ sequential operations..In terms of computational complexity, self-attention layers are faster than recurrent layers when the sequence.length $n$ is smaller than the representation dimensionality $d$, which is most often the case with sentence representations used by state-of-the-art models in machine translations, such as word-piece [38] and byte-pair [31] representations..To improve computational performance for tasks involving very long sequences, self-attention could be restricted to considering only a neighborhood of size $r$ in the input sequence centered around the respective output position..This would increase the maximum path length to $O(n / r)$..We plan to investigate this approach further in future work..A single convolutional layer with kernel width $k<n$ does not connect all pairs of input and output positions..Doing so requires a stack of $O(n / k)$ convolutional layers in the case of contiguous kernels, or $O\\left(\\log _{k}(n)\\right)$ in the case of dilated convolutions [18], increasing the length of the longest paths between any two positions in the network..Convolutional layers are generally more expensive than recurrent layers, by a factor of $k$..Separable convolutions [6], however, decrease the complexity considerably, to $O\\left(k \\cdot n \\cdot d+n \\cdot d^{2}\\right)$..Even with $k=n$, however, the complexity of a separable convolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer, the approach we take in our model..As side benefit, self-attention could yield more interpretable models..We inspect attention distributions from our models and present and discuss examples in the appendix.",
        "similarity": 0.745494224265393,
        "file_info": {
            "title": "1706",
            "author": "",
            "creator": "LaTeX with hyperref",
            "subject": "",
            "keywords": "",
            "producer": "pdfTeX-1.40.25",
            "extension": "03762v7"
        },
        "chunk_info": {
            "encoder": "sentence_encoder",
            "language": "en",
            "chunk_size": 712,
            "chunk_type": "sentence_chunk",
            "chunk_index": 6,
            "next_chunk_id": "caa43081-0eb9-4582-b537-33a01e5ebf53",
            "prev_chunk_id": "94f18c90-975a-43b4-86fd-14eb65d6224a"
        },
        "position_info": {},
        "media_ref": {
            "links": [],
            "images": [],
            "tables": []
        },
        "semantic_info": {
            "keywords": [
                "9",
                "two",
                "Table 3 row",
                "one",
                "x_{i",
                "three desiderata",
                "One",
                "third",
                "One",
                "12]",
                "two",
                "Table 1",
                "O(n)$",
                "38",
                "31",
                "kernel width",
                "k",
                "O\\left(\\log",
                "18",
                "two",
                "k$",
                "6",
                "d^{2}\\right)$"
            ]
        },
        "created_at": "2025-07-12T19:00:04.636371+00:00"
    },
    {
        "id": 298,
        "chunk_id": "8baff0e1-a536-44a3-bba2-7c4c27671a1f",
        "content": "# Attention Is All You Need \n\nAshish Vaswani*<br>Google Brain<br>avaswani@google.com<br>Llion Jones*<br>Google Research<br>llion@google.com\n\nNoam Shazeer*<br>Google Brain<br>noam@google.com<br>Niki Parmar*<br>Google Research<br>nikip@google.com<br>Jakob Uszkoreit*<br>Google Research<br>usz@google.com<br>Aidan N..Gomez* ${ }^{\\dagger}$<br>University of Toronto<br>aidan@cs.toronto.edu\n\n\u0141ukasz Kaiser*<br>Google Brain<br>lukaszkaiser@google.com\n\n## Illia Polosukhin* ${ }^{\\ddagger}$<br>illia.polosukhin@gmail.com\n\n\n#### Abstract\n\nThe dominant sequence transduction models are based on complex recurrent or convolutional neural networks that include an encoder and a decoder..The best performing models also connect the encoder and decoder through an attention mechanism..We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and convolutions entirely..Experiments on two machine translation tasks show these models to be superior in quality while being more parallelizable and requiring significantly less time to train..Our model achieves 28.4 BLEU on the WMT 2014 English-to-German translation task, improving over the existing best results, including ensembles, by over 2 BLEU..On the WMT 2014 English-to-French translation task, our model establishes a new single-model state-of-the-art BLEU score of 41.8 after training for 3.5 days on eight GPUs, a small fraction of the training costs of the best models from the literature..We show that the Transformer generalizes well to other tasks by applying it successfully to English constituency parsing both with large and limited training data..[^0]\n[^0]:    *Equal contribution..Listing order is random..Jakob proposed replacing RNNs with self-attention and started the effort to evaluate this idea..Ashish, with Illia, designed and implemented the first Transformer models and has been crucially involved in every aspect of this work..Noam proposed scaled dot-product attention, multi-head attention and the parameter-free position representation and became the other person involved in nearly every detail..Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and tensor2tensor..Llion also experimented with novel model variants, was responsible for our initial codebase, and efficient inference and visualizations..Lukasz and Aidan spent countless long days designing various parts of and implementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating our research..${ }^{\\dagger}$ Work performed while at Google Brain..${ }^{\\ddagger}$ Work performed while at Google Research..# 1 Introduction \n\nRecurrent neural networks, long short-term memory [13] and gated recurrent [7] neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation [35, 2, 5]..Numerous efforts have since continued to push the boundaries of recurrent language models and encoder-decoder architectures $[38,24,15]$.",
        "similarity": 0.745080910476474,
        "file_info": {
            "title": "1706",
            "author": "",
            "creator": "LaTeX with hyperref",
            "subject": "",
            "keywords": "",
            "producer": "pdfTeX-1.40.25",
            "extension": "03762v7"
        },
        "chunk_info": {
            "encoder": "sentence_encoder",
            "language": "en",
            "chunk_size": 695,
            "chunk_type": "sentence_chunk",
            "chunk_index": 0,
            "next_chunk_id": "0c1828a2-8c23-4e5b-9318-2537849ce42b",
            "prev_chunk_id": ""
        },
        "position_info": {},
        "media_ref": {
            "links": [],
            "images": [],
            "tables": []
        },
        "semantic_info": {
            "keywords": [
                "usz@google.com",
                "Gomez",
                "Illia Polosukhin",
                "####",
                "Transformer",
                "two",
                "28.4",
                "WMT",
                "2014",
                "English",
                "German",
                "2",
                "WMT",
                "2014",
                "English",
                "French",
                "BLEU",
                "41.8",
                "3.5 days",
                "eight",
                "Transformer",
                "English",
                "Jakob",
                "Ashish",
                "Illia",
                "first",
                "Transformer",
                "Noam",
                "Niki",
                "Aidan",
                "Google Brain",
                "Google Research",
                "13",
                "7",
                "35",
                "2",
                "5]"
            ]
        },
        "created_at": "2025-07-12T19:00:04.636371+00:00"
    },
    {
        "id": 300,
        "chunk_id": "334cdfc2-b18b-47ad-b038-4d058d821737",
        "content": "Aligning the positions to steps in computation time, they generate a sequence of hidden states $h_{t}$, as a function of the previous hidden state $h_{t-1}$ and the input for position $t$..This inherently sequential nature precludes parallelization within training examples, which becomes critical at longer sequence lengths, as memory constraints limit batching across examples..Recent work has achieved significant improvements in computational efficiency through factorization tricks [21] and conditional computation [32], while also improving model performance in case of the latter..The fundamental constraint of sequential computation, however, remains..Attention mechanisms have become an integral part of compelling sequence modeling and transduction models in various tasks, allowing modeling of dependencies without regard to their distance in the input or output sequences [2, 19]..In all but a few cases [27], however, such attention mechanisms are used in conjunction with a recurrent network..In this work we propose the Transformer, a model architecture eschewing recurrence and instead relying entirely on an attention mechanism to draw global dependencies between input and output..The Transformer allows for significantly more parallelization and can reach a new state of the art in translation quality after being trained for as little as twelve hours on eight P100 GPUs..## 2 Background\n\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU [16], ByteNet [18] and ConvS2S [9], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions..In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet..This makes it more difficult to learn dependencies between distant positions [12]..In the Transformer this is reduced to a constant number of operations, albeit at the cost of reduced effective resolution due to averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as described in section 3.2..Self-attention, sometimes called intra-attention is an attention mechanism relating different positions of a single sequence in order to compute a representation of the sequence..Self-attention has been used successfully in a variety of tasks including reading comprehension, abstractive summarization, textual entailment and learning task-independent sentence representations [4, 27, 28, 22]..End-to-end memory networks are based on a recurrent attention mechanism instead of sequencealigned recurrence and have been shown to perform well on simple-language question answering and language modeling tasks [34]..To the best of our knowledge, however, the Transformer is the first transduction model relying entirely on self-attention to compute representations of its input and output without using sequencealigned RNNs or convolution..In the following sections, we will describe the Transformer, motivate self-attention and discuss its advantages over models such as [17, 18] and [9]..## 3 Model Architecture\n\nMost competitive neural sequence transduction models have an encoder-decoder structure [5, 2, 35]..Here, the encoder maps an input sequence of symbol representations $\\left(x_{1}, \\ldots, x_{n}\\right)$ to a sequence of continuous representations $\\mathbf{z}=\\left(z_{1}, \\ldots, z_{n}\\right)$..Given $\\mathbf{z}$, the decoder then generates an output sequence $\\left(y_{1}, \\ldots, y_{m}\\right)$ of symbols one element at a time.",
        "similarity": 0.741757474594041,
        "file_info": {
            "title": "1706",
            "author": "",
            "creator": "LaTeX with hyperref",
            "subject": "",
            "keywords": "",
            "producer": "pdfTeX-1.40.25",
            "extension": "03762v7"
        },
        "chunk_info": {
            "encoder": "sentence_encoder",
            "language": "en",
            "chunk_size": 725,
            "chunk_type": "sentence_chunk",
            "chunk_index": 1,
            "next_chunk_id": "d3a68f3f-c295-4c97-9c20-3ed48c87b477",
            "prev_chunk_id": "0c1828a2-8c23-4e5b-9318-2537849ce42b"
        },
        "position_info": {},
        "media_ref": {
            "links": [],
            "images": [],
            "tables": []
        },
        "semantic_info": {
            "keywords": [
                "h_{t}$",
                "21",
                "32",
                "2",
                "19]",
                "27",
                "Transformer",
                "Transformer",
                "as little as twelve hours",
                "eight P100",
                "16",
                "ByteNet",
                "18",
                "9",
                "two",
                "ConvS2S",
                "ByteNet",
                "12]",
                "Transformer",
                "Multi-Head Attention",
                "4",
                "27",
                "28",
                "22]",
                "34]",
                "Transformer",
                "first",
                "Transformer",
                "17",
                "18",
                "9",
                "5",
                "2",
                "35]",
                "\\mathbf{z}=\\left(z_{1",
                "\\ldots",
                "z_{n}\\right)$",
                "\\ldots",
                "y_{m}\\right)$",
                "one"
            ]
        },
        "created_at": "2025-07-12T19:00:04.636371+00:00"
    },
    {
        "id": 305,
        "chunk_id": "e1f31f42-a65f-48f1-9786-5e0ceff214cd",
        "content": "### 3.4 Embeddings and Softmax\n\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input tokens and output tokens to vectors of dimension $d_{\\text {model }}$..We also use the usual learned linear transformation and softmax function to convert the decoder output to predicted next-token probabilities..In our model, we share the same weight matrix between the two embedding layers and the pre-softmax linear transformation, similar to [30]..In the embedding layers, we multiply those weights by $\\sqrt{d_{\\text {model }}}$..Table 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations for different layer types..$n$ is the sequence length, $d$ is the representation dimension, $k$ is the kernel size of convolutions and $r$ the size of the neighborhood in restricted self-attention..| Layer Type | Complexity per Layer | Sequential <br> Operations | Maximum Path Length |\n| :-- | :--: | :--: | :--: |\n| Self-Attention | $O\\left(n^{2} \\cdot d\\right)$ | $O(1)$ | $O(1)$ |\n| Recurrent | $O\\left(n \\cdot d^{2}\\right)$ | $O(n)$ | $O(n)$ |\n| Convolutional | $O\\left(k \\cdot n \\cdot d^{2}\\right)$ | $O(1)$ | $O\\left(\\log _{k}(n)\\right)$ |\n| Self-Attention (restricted) | $O(r \\cdot n \\cdot d)$ | $O(1)$ | $O(n / r)$ |\n\n# 3.5 Positional Encoding \n\nSince our model contains no recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence..To this end, we add \"positional encodings\" to the input embeddings at the bottoms of the encoder and decoder stacks.",
        "similarity": 0.740232794312573,
        "file_info": {
            "title": "1706",
            "author": "",
            "creator": "LaTeX with hyperref",
            "subject": "",
            "keywords": "",
            "producer": "pdfTeX-1.40.25",
            "extension": "03762v7"
        },
        "chunk_info": {
            "encoder": "sentence_encoder",
            "language": "en",
            "chunk_size": 428,
            "chunk_type": "sentence_chunk",
            "chunk_index": 5,
            "next_chunk_id": "94f18c90-975a-43b4-86fd-14eb65d6224a",
            "prev_chunk_id": "b81a9058-2216-4ef9-9664-106e77d9d8cd"
        },
        "position_info": {},
        "media_ref": {
            "links": [],
            "images": [],
            "tables": []
        },
        "semantic_info": {
            "keywords": [
                "two",
                "30]",
                "\\sqrt{d_{\\text",
                "$n$",
                "k$",
                "Layer Type",
                "Complexity per Layer",
                "Sequential",
                "Maximum Path Length",
                "Recurrent",
                "O\\left(n",
                "d^{2}\\right)$",
                "Convolutional",
                "d^{2}\\right)$",
                "O\\left(\\log",
                "Self-Attention",
                "# 3.5",
                "Positional Encoding \n\nSince"
            ]
        },
        "created_at": "2025-07-12T19:00:04.636371+00:00"
    },
    {
        "id": 314,
        "chunk_id": "a4578e69-9d78-45aa-8e27-6af2f1c4837c",
        "content": "(2014) [37] | semi-supervised | 92.1 |\n| Transformer (4 layers) | semi-supervised | 92.7 |\n| Luong et al..(2015) [23] | multi-task | 93.0 |\n| Dyer et al..(2016) [8] | generative | 93.3 |\n\nincreased the maximum output length to input length +300 ..We used a beam size of 21 and $\\alpha=0.3$ for both WSJ only and the semi-supervised setting..Our results in Table 4 show that despite the lack of task-specific tuning our model performs surprisingly well, yielding better results than all previously reported models with the exception of the Recurrent Neural Network Grammar [8]..In contrast to RNN sequence-to-sequence models [37], the Transformer outperforms the BerkeleyParser [29] even when training only on the WSJ training set of 40 K sentences..# 7 Conclusion \n\nIn this work, we presented the Transformer, the first sequence transduction model based entirely on attention, replacing the recurrent layers most commonly used in encoder-decoder architectures with multi-headed self-attention..For translation tasks, the Transformer can be trained significantly faster than architectures based on recurrent or convolutional layers..On both WMT 2014 English-to-German and WMT 2014 English-to-French translation tasks, we achieve a new state of the art..In the former task our best model outperforms even all previously reported ensembles..We are excited about the future of attention-based models and plan to apply them to other tasks..We plan to extend the Transformer to problems involving input and output modalities other than text and to investigate local, restricted attention mechanisms to efficiently handle large inputs and outputs such as images, audio and video..Making generation less sequential is another research goals of ours..The code we used to train and evaluate our models is available at https://github.com/ tensorflow/tensor2tensor..Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful comments, corrections and inspiration..## References\n\n[1] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton..Layer normalization..arXiv preprint arXiv:1607.06450, 2016..[2] Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio..Neural machine translation by jointly learning to align and translate..CoRR, abs/1409.0473, 2014..[3] Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V..Le..Massive exploration of neural machine translation architectures..CoRR, abs/1703.03906, 2017..[4] Jianpeng Cheng, Li Dong, and Mirella Lapata..Long short-term memory-networks for machine reading..arXiv preprint arXiv:1601.06733, 2016..[5] Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk, and Yoshua Bengio..Learning phrase representations using rnn encoder-decoder for statistical machine translation..CoRR, abs/1406.1078, 2014..[6] Francois Chollet..Xception: Deep learning with depthwise separable convolutions..arXiv preprint arXiv:1610.02357, 2016..[7] Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio..Empirical evaluation of gated recurrent neural networks on sequence modeling.",
        "similarity": 0.709304430803527,
        "file_info": {
            "title": "1706",
            "author": "",
            "creator": "LaTeX with hyperref",
            "subject": "",
            "keywords": "",
            "producer": "pdfTeX-1.40.25",
            "extension": "03762v7"
        },
        "chunk_info": {
            "encoder": "sentence_encoder",
            "language": "en",
            "chunk_size": 775,
            "chunk_type": "sentence_chunk",
            "chunk_index": 11,
            "next_chunk_id": "1f0ab778-6546-4d78-8cbd-8fd2da467d8b",
            "prev_chunk_id": "d17f5fd0-b9f9-4ddb-93b8-f4a3fd98de17"
        },
        "position_info": {},
        "media_ref": {
            "links": [],
            "images": [],
            "tables": []
        },
        "semantic_info": {
            "keywords": [
                "2014",
                "37",
                "92.1",
                "Transformer",
                "4",
                "92.7",
                "Luong",
                "23",
                "Dyer et al..(2016",
                "8",
                "93.3",
                "21",
                "$\\alpha=0.3$",
                "WSJ",
                "Table 4",
                "the Recurrent Neural Network Grammar",
                "8]",
                "RNN",
                "37",
                "Transformer",
                "BerkeleyParser",
                "29",
                "WSJ",
                "40",
                "Transformer",
                "first",
                "Transformer",
                "WMT",
                "2014",
                "English",
                "German",
                "WMT",
                "2014",
                "English",
                "French",
                "Transformer",
                "Nal Kalchbrenner",
                "Stephan Gouws",
                "1",
                "Lei Ba",
                "Jamie Ryan Kiros",
                "Geoffrey E Hinton",
                "2016",
                "Dzmitry Bahdanau",
                "Kyunghyun Cho",
                "Yoshua Bengio",
                "CoRR",
                "2014",
                "Denny Britz",
                "Anna Goldie",
                "Minh-Thang Luong",
                "Quoc",
                "CoRR",
                "2017",
                "Jianpeng Cheng",
                "Li Dong",
                "Mirella Lapata",
                "2016",
                "Kyunghyun Cho",
                "Bart van Merrienboer",
                "Caglar Gulcehre",
                "Fethi Bougares",
                "Holger Schwenk",
                "Yoshua Bengio",
                "CoRR",
                "2014",
                "Francois Chollet",
                "2016",
                "Junyoung Chung",
                "\u00c7aglar G\u00fcl\u00e7ehre",
                "Kyunghyun Cho",
                "Yoshua Bengio"
            ]
        },
        "created_at": "2025-07-12T19:00:04.636371+00:00"
    },
    {
        "id": 315,
        "chunk_id": "1f0ab778-6546-4d78-8cbd-8fd2da467d8b",
        "content": "CoRR, abs/1412.3555, 2014..[8] Chris Dyer, Adhiguna Kuncoro, Miguel Ballesteros, and Noah A..Smith..Recurrent neural network grammars..In Proc..of NAACL, 2016..[9] Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N..Dauphin..Convolutional sequence to sequence learning..arXiv preprint arXiv:1705.03122v2, 2017..[10] Alex Graves..Generating sequences with recurrent neural networks..arXiv preprint arXiv:1308.0850, 2013..[11] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun..Deep residual learning for image recognition..In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pages 770-778, 2016..[12] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber..Gradient flow in recurrent nets: the difficulty of learning long-term dependencies, 2001..[13] Sepp Hochreiter and J\u00fcrgen Schmidhuber..Long short-term memory..Neural computation, 9(8):1735-1780, 1997..[14] Zhongqiang Huang and Mary Harper..Self-training PCFG grammars with latent annotations across languages..In Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing, pages 832-841..ACL, August 2009..[15] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu..Exploring the limits of language modeling..arXiv preprint arXiv:1602.02410, 2016..[16] \u0141ukasz Kaiser and Samy Bengio..Can active memory replace attention?.In Advances in Neural Information Processing Systems, (NIPS), 2016..[17] \u0141ukasz Kaiser and Ilya Sutskever..Neural GPUs learn algorithms..In International Conference on Learning Representations (ICLR), 2016..[18] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Koray Kavukcuoglu..Neural machine translation in linear time..arXiv preprint arXiv:1610.10099v2, 2017..[19] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M..Rush..Structured attention networks..In International Conference on Learning Representations, 2017..[20] Diederik Kingma and Jimmy Ba..Adam: A method for stochastic optimization..In ICLR, 2015..[21] Oleksii Kuchaiev and Boris Ginsburg..Factorization tricks for LSTM networks..arXiv preprint arXiv:1703.10722, 2017..[22] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen Zhou, and Yoshua Bengio..A structured self-attentive sentence embedding..arXiv preprint arXiv:1703.03130, 2017..[23] Minh-Thang Luong, Quoc V..Le, Ilya Sutskever, Oriol Vinyals, and Lukasz Kaiser.",
        "similarity": 0.641832072789433,
        "file_info": {
            "title": "1706",
            "author": "",
            "creator": "LaTeX with hyperref",
            "subject": "",
            "keywords": "",
            "producer": "pdfTeX-1.40.25",
            "extension": "03762v7"
        },
        "chunk_info": {
            "encoder": "sentence_encoder",
            "language": "en",
            "chunk_size": 754,
            "chunk_type": "sentence_chunk",
            "chunk_index": 12,
            "next_chunk_id": "1b5bb4e3-3058-4e8f-adb3-aaa11c3328ad",
            "prev_chunk_id": "a4578e69-9d78-45aa-8e27-6af2f1c4837c"
        },
        "position_info": {},
        "media_ref": {
            "links": [],
            "images": [],
            "tables": []
        },
        "semantic_info": {
            "keywords": [
                "CoRR",
                "2014",
                "Chris Dyer",
                "Adhiguna Kuncoro",
                "Miguel Ballesteros",
                "Noah",
                "NAACL",
                "2016",
                "Jonas Gehring",
                "Michael Auli",
                "David Grangier",
                "Denis Yarats",
                "Yann N",
                "2017",
                "Alex Graves",
                "2013",
                "Xiangyu Zhang",
                "Shaoqing Ren",
                "Jian Sun",
                "the IEEE Conference on Computer Vision",
                "Pattern Recognition",
                "770-778",
                "2016",
                "Yoshua Bengio",
                "Paolo Frasconi",
                "J\u00fcrgen Schmidhuber",
                "2001",
                "J\u00fcrgen Schmidhuber",
                "9(8):1735-1780",
                "Zhongqiang Huang",
                "Mary Harper",
                "the 2009 Conference on Empirical Methods in Natural Language Processing",
                "832-841",
                "ACL",
                "August 2009",
                "Oriol Vinyals",
                "Mike Schuster",
                "Noam Shazeer",
                "Yonghui Wu",
                "2016",
                "[16",
                "Samy Bengio",
                "attention?.In Advances",
                "Neural Information Processing Systems",
                "2016",
                "[17",
                "2016",
                "Nal Kalchbrenner",
                "Lasse Espeholt",
                "Karen Simonyan",
                "Aaron",
                "Oord",
                "Alex Graves",
                "Koray Kavukcuoglu",
                "2017",
                "[19",
                "Yoon Kim",
                "Carl Denton",
                "Luong Hoang",
                "Alexander M..Rush",
                "2017",
                "Diederik Kingma",
                "Jimmy Ba",
                "Adam",
                "2015",
                "[21",
                "Boris Ginsburg",
                "arXiv:1703.10722",
                "2017",
                "[22",
                "Zhouhan Lin",
                "Minwei Feng",
                "Cicero Nogueira",
                "Santos",
                "Mo Yu",
                "Bing Xiang",
                "Bowen Zhou",
                "Yoshua Bengio",
                "2017",
                "Thang Luong",
                "Quoc V..Le, Ilya Sutskever",
                "Oriol Vinyals",
                "Lukasz Kaiser"
            ]
        },
        "created_at": "2025-07-12T19:00:04.636371+00:00"
    }
]